###########################################
###### Workflow for HISAT2 alignment ######
## and processing BAM files for counting ##
###########################################

## - Information about project & samples - ##
# Original fastq files were obtained from the Short Read Archive (SRA).
# All sample names (indicated by {sample}) include both the Sequence Read Archive (SRA) Sample ID (SRS#) and the treatment group - e.g. SRS5770694_C1abs.
# SRA Project ID: SRP234876; Bioproject ID: PRJNA593775; Gene Expression Omnibus Series ID: GSE141520

## - Using This Script - ##
# See README file in GitHub before running these scripts.
# Remember to change variables under the heading "USERS SHOULD CHANGE THE FOLLOWING VARIABLES"

#####################
## Start of Script ##
#####################

import os

## - USERS SHOULD CHANGE THE FOLLOWING VARIABLES - ##
# Config file
configfile: "carpenter_config.json"

# Tool paths
hisat2_path = "/home/avannan/miniconda3/envs/rodent_addiction/bin/hisat2" # Version 2.2.1
samtools_path = "/home/avannan/miniconda3/envs/rodent_addiction/bin/samtools" # Version 1.7
bamtools_path = "/home/avannan/miniconda3/envs/rodent_addiction/bin/bamtools" # Version 2.5.1
# Reference Directories
salmon_index = "/scratch/avannan/refs/mouse/mm10/salmon_index"
hisat2_index = "/scratch/avannan/refs/mouse/GRCm39/HISAT2_splice/Mus_musculus.GRCm39.105"
# Starting Directory
start_dir = "/data/CEM/wilsonlab/projects/rodent_addiction/"
## -- END SECTION FOR CHANGING VARIABLES -- ##


# Directory Variables
# Trimmed FASTQs
trimmed_fastq_dir = os.path.join(start_dir, config["trimmed_fastq_dir"]) # Trimmed FASTQs
# Alignment
salmon_dir = os.path.join(start_dir, config["salmon_dir"]) # Checking library type with Salmon
hisat2_sams_dir = os.path.join(start_dir, config["hisat2_sams_dir"]) # SAM files generated by HISAT2
hisat2_bams_dir = os.path.join(start_dir, config["hisat2_bams_dir"]) # BAM files converted from HISAT2 SAM files
# Processing (doesn't include marking duplicates or adding read groups)
hisat2_sorted_bams_dir = os.path.join(start_dir, config["hisat2_sorted_bams_dir"]) # Sorted HISAT2 BAM files
hisat2_sorted_bams_stats_dir = os.path.join(start_dir, config["hisat2_sorted_bams_stats_dir"]) # Bamtool stats files for sorted BAMs

######################
## All Output Files ##
######################

rule all:
	input:
		# CHECK LIBRARY TYPE (PLUS ALIGN/COUNT) WITH SALMON
		expand(os.path.join(salmon_dir, "carpenter_{sample}_salmon_quant/"), sample = config["28abs_ALL"]),

		# ALIGNMENT WITH HISAT2
		# HISAT2 paired, trimmed SAM files
		expand(os.path.join(hisat2_sams_dir, "carpenter_{sample}_hisat2_pair_trim.sam"), sample = config["28abs_ALL"]),
		expand(os.path.join(hisat2_sams_dir, "summary/carpenter_{sample}_hisat2_summary.txt"), sample = config["28abs_ALL"]),
		# HISAT2 paired, trimmed BAM files
		expand(os.path.join(hisat2_bams_dir, "carpenter_{sample}_hisat2_pair_trim.bam"), sample = config["28abs_ALL"]),

		# PROCESSING AFTER HISAT2 ALIGNMENT
		# HISAT2 paired, trimmed, sorted, BAM files and their indexes
		expand(os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam"), sample = config["28abs_ALL"]),
		expand(os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam.bai"), sample = config["28abs_ALL"]),
		# Stats for paired, trimmed, sorted, HISAT2 BAM files
		expand(os.path.join(hisat2_sorted_bams_stats_dir, "carpenter_{sample}_hisat2_pair_trim_sort_stats.txt"), sample = config["28abs_ALL"])

##################
## 03_alignment ##
##################

####################################
## Check library type with Salmon ##
####################################

rule salmon_quant:
	input:
		TRIMMED_FQ1 = os.path.join(trimmed_fastq_dir, "carpenter_{sample}_trim_fq1.fastq"),
		TRIMMED_FQ2 = os.path.join(trimmed_fastq_dir, "carpenter_{sample}_trim_fq2.fastq"),
	output:
		OUTPUT = os.path.join(salmon_dir, "carpenter_{sample}_salmon_quant/")
	params:
		salmon_index = salmon_index,
		libtype = "A", # Automatic detection of library type
		threads = 8
	shell:
		"""
		source ~/miniconda3/etc/profile.d/conda.sh && conda deactivate && conda activate salmon &&
		salmon quant -i {params.salmon_index} -l {params.libtype} -1 {input.TRIMMED_FQ1} -2 {input.TRIMMED_FQ2} -o {output.OUTPUT}
		"""

###########################
## Alignment with HISAT2 ##
###########################

rule hisat2_align:
	input:
		TRIMMED_FQ1 = os.path.join(trimmed_fastq_dir, "carpenter_{sample}_trim_fq1.fastq"),
		TRIMMED_FQ2 = os.path.join(trimmed_fastq_dir, "carpenter_{sample}_trim_fq2.fastq")
	output:
		HISAT2_SAM = os.path.join(hisat2_sams_dir, "carpenter_{sample}_hisat2_pair_trim.sam"),
		SUMMARY = os.path.join(hisat2_sams_dir, "summary/carpenter_{sample}_hisat2_summary.txt")
	message: "Mapping {wildcards.sample} reads (paired, reverse-stranded) to {params.HISAT2_INDEX} with HISAT2."
	params:
		hisat2 = hisat2_path,
		HISAT2_INDEX = hisat2_index,
		s = 'RF', # Determined by Salmon as "ISR"
		threads = 8
	shell:
		"""
		{params.hisat2} --rna-strandness {params.s} --dta -p {params.threads} -x {params.HISAT2_INDEX} -1 {input.TRIMMED_FQ1} -2 {input.TRIMMED_FQ2} \
		-S {output.HISAT2_SAM} --summary-file {output.SUMMARY}
		"""

rule hisat2_sam_to_bam:
	input:
		HISAT2_SAM = os.path.join(hisat2_sams_dir, "carpenter_{sample}_hisat2_pair_trim.sam")
	output:
		HISAT2_BAM = os.path.join(hisat2_bams_dir, "carpenter_{sample}_hisat2_pair_trim.bam")
	message: "Converting {input.HISAT2_SAM} to BAM."
	params:
		samtools = samtools_path
	shell:
		"""
		{params.samtools} view -b {input.HISAT2_SAM} > {output.HISAT2_BAM}
		"""

###################
## 04_processing ##
###################

#################################################
## Processing BAM files after HISAT2 alignment ##
#################################################

rule hisat2_sort:
	input:
		HISAT2_UNSORTED_BAM = os.path.join(hisat2_bams_dir, "carpenter_{sample}_hisat2_pair_trim.bam")
	output:
		HISAT2_SORTED_BAM = os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam")
	message: "Sorting BAM file {input.HISAT2_UNSORTED_BAM}."
	params:
		bamtools = bamtools_path
	shell:
		"""
		{params.bamtools} sort -in {input.HISAT2_UNSORTED_BAM} -out {output.HISAT2_SORTED_BAM}
		"""

rule hisat2_sorted_stats:
	input:
		HISAT2_SORTED_BAM = os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam")
	output:
		HISAT2_SORTED_STATS = os.path.join(hisat2_sorted_bams_stats_dir, "carpenter_{sample}_hisat2_pair_trim_sort_stats.txt")
	params:
		bamtools = bamtools_path
	shell:
		"""
		{params.bamtools} stats -in {input.HISAT2_SORTED_BAM} > {output.HISAT2_SORTED_STATS}
		"""

rule hisat2_index_sorted_bams:
	input:
		HISAT2_SORTED_BAM = os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam")
	output: os.path.join(hisat2_sorted_bams_dir, "carpenter_{sample}_hisat2_pair_trim_sort.bam.bai")
	message: "Indexing BAM file {input.HISAT2_SORTED_BAM} with Bamtools."
	params:
		bamtools = bamtools_path
	shell:
		"""
		{params.bamtools} index -in {input.HISAT2_SORTED_BAM}
		"""